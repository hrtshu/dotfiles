#!/bin/bash

if [ -z "${BASH_SOURCE}" ]; then
    echo "Please execute with bash" 1>&2
    return 1
fi

if [ "${BASH_SOURCE}" != "$0" ]; then
    echo "Don't use . (dot) and source command. Please execute directory." 1>&2
    return 1
fi

if [ $# -ge 2 ]; then
    echo "Usage: $0 [destination]" 1>&2
    exit 1
fi

DOTFILES_ROOT="$(cd $(dirname $0) && pwd)"
DOTFILES_FILES=(
    .profile
    .bashrc
    .inputrc
    .gitconfig
    .tmux.conf
    .tigrc
    .asdfrc
    .Brewfile
    .ssh/config:ssh_config
    .ssh/config.d/git:ssh_config_git
    .config/alacritty/alacritty.yml
    .config/git/ignore:git_ignore
)
DOTFILES_FILES_MAC=(.ssh/config.d/agent:ssh_config_agent)
SUDOERS_NOPASSWD="sudoers.nopasswd"
SUDOERS_NOPASSWD_DEST="nopasswd"
WSL_CONF="wsl.conf"

VIMRUNTIME_REPO="https://github.com/hrtshu/vimrc.git"
VIMRUNTIME_ROOT_DIR=".vim_runtime"
VIMRUNTIME_INSTALLER_FILE="install_awesome_vimrc.sh"

XDG_DIRS_UPDATE=/usr/bin/xdg-user-dirs-update
OS_RELEASE=/proc/sys/kernel/osrelease

function ln_ () {
    src="$1"
    dest="$2"

    [ "$src" = "`readlink $dest`" ] && return

    ln -i -s "$src" "$dest"
}

function deploy_conf () {
    DEST_DIR="$1"
    IFS=, ARG=(${2//:/,}) # $2を:で分割して配列に格納
    DEST="${ARG[0]}"
    SRC="${ARG[1]}"

    [ -z "$SRC" ] && SRC="$(basename $DEST)"

    mkdir -p "$(dirname "$DEST_DIR/$DEST")" && ln_ "$DOTFILES_ROOT/$SRC" "$DEST_DIR/$DEST"
}

DEST_HOME="$1"
[ -z "$DEST_HOME" ] && DEST_HOME=~
if [ ! -d "$DEST_HOME" ]; then
    echo "Not exists or not a directory: $DEST_HOME" 1>&2
    exit 1
fi

for git in "/usr/bin/git" "/bin/git"; do
    if [ -x "$git" ]; then
        GIT="$git"
        break
    fi
done

for file in "${DOTFILES_FILES[@]}"; do
    deploy_conf "$DEST_HOME" "$file"
done
if [[ "$OSTYPE" == "darwin"* ]]; then
    for file in "${DOTFILES_FILES_MAC[@]}"; do
        deploy_conf "$DEST_HOME" "$file"
    done
fi

VIMRUNTIME_ROOT="$DEST_HOME/$VIMRUNTIME_ROOT_DIR"
VIMRUNTIME_INSTALLER="$VIMRUNTIME_ROOT/$VIMRUNTIME_INSTALLER_FILE"
if [ ! -e "$VIMRUNTIME_ROOT" ]; then
    if [ ! -z "$GIT" ]; then
        "$GIT" clone --depth=1 "$VIMRUNTIME_REPO" "$VIMRUNTIME_ROOT"
        . "$VIMRUNTIME_INSTALLER"
    else
        echo "Skipped vimrc installation because Git is not installed." 1>&2
    fi
fi

HOME=~
if [ "$DEST_HOME" == "$HOME" -a -x "$XDG_DIRS_UPDATE" ]; then
    "$XDG_DIRS_UPDATE"
fi

if [ -r "$OS_RELEASE" ] && grep -q Microsoft "$OS_RELEASE"; then
    echo "Please enter your password to install /etc/sudoers.d/sudoers.nopasswd"
    nopasswd_dest="/etc/sudoers.d/$SUDOERS_NOPASSWD_DEST"
    sudo sh -c "
        cp -i \"$DOTFILES_ROOT/$SUDOERS_NOPASSWD\" \"$nopasswd_dest\" &&
        chown 0:0 \"$nopasswd_dest\" && chmod 440 \"$nopasswd_dest\"
    "
    wsl_dest="/etc/$WSL_CONF"
    sudo sh -c "
        cp -i \"$DOTFILES_ROOT/$WSL_CONF\" \"$wsl_dest\" &&
        chown 0:0 \"$wsl_dest\" && chmod 644 \"$wsl_dest\"
    "
fi

if [ ! -f "$DEST_HOME/.profile_env" ]; then
    cat >> "$DEST_HOME/.profile_env" <<EOF
# 環境依存であることが自明な設定だけを追加しましょう
# （例: トークンの設定 export BUNDLE_GITHUB__COM=x-access-token:xxxxxx ）

EOF
fi

# install brew on Mac
if [[ "$OSTYPE" == "darwin"* ]] && ! command -v brew > /dev/null; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

if command -v brew > /dev/null; then
    brew bundle install --no-lock --file=<(grep -E "^(tap|brew)" "$DEST_HOME/.Brewfile")

    # homebrew-autoupdate
    brew install -q terminal-notifier # ensure terminal-notifier is installed
    brew autoupdate status | grep -q "Autoupdate is installed and running." || brew autoupdate start --upgrade --greedy --enable-notification
    # TODO: SUDO_ASKPASS
    # https://github.com/Homebrew/homebrew-autoupdate/issues/40
fi
